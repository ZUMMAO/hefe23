package com.worklight.common;

/* loaded from: classes4.dex */
public class WLConfig {
    private static final java.lang.String ANDROID_ASSET = "/android_asset";
    public static final java.lang.String APP_ID = "id";
    private static final java.lang.String APP_ID_PREF_KEY = "appIdPref";
    private static final java.lang.String APP_INSTALL_TIME_KEY = "appInstallTime";
    private static final java.lang.String CLEAR_CACHE_NEXT_LOAD = "com.worklight.clearCacheNextLoad";
    public static final java.lang.String CLIENT_PLATFORM = "clientPlatform";
    public static final java.lang.String ENABLE_LEGACY_HTTP = "legacy_http";
    private static final java.lang.String IGNORED_FILE_EXTENSIONS = "ignoredFileExtensions";
    private static final java.lang.String IN_PROGRESS_CHECKSUM = "inProgressChecksum";
    private static final java.lang.String LANGUAGE_PREFS = "languagePreferences";
    private static final java.lang.String MFP_PLATFORM_VERSION = "8.0.0.00.2015-12-11T23:31:24Z";
    public static final java.lang.String SDK_PROTOCOL_VERSION_KEY = "sdk_protocol_version";
    private static final java.lang.String SECURITY_PREFS = "SecurityPrefs";
    private static final java.lang.String SECURITY_TOKEN_PREFS = "SecurityTokenPrefs";
    private static final java.lang.String USE_CUSTOM_SERVER_URL = "useCustomServerUrl";
    public static final java.lang.String VERSION = "version";
    public static final java.lang.String WL_APP_ID = "wlAppId";
    public static final java.lang.String WL_APP_VERSION = "wlAppVersion";
    public static final java.lang.String WL_CLIENT_PROPS_NAME = "mfpclient.properties";
    private static final java.lang.String WL_DEFAULT_SERVER_URL = "WLDefaultServerURL";
    private static final java.lang.String WL_DEVICE_ID_STRENGTH = "wlDeviceIdStrength";
    private static final java.lang.String WL_DIRECT_UPDATE_PUBLIC_KEY = "wlSecureDirectUpdatePublicKey";
    public static final java.lang.String WL_DIRECT_UPDATE_TEMP_FOLDER = "wlDirectUppdateTempFolder";
    public static final java.lang.String WL_ENABLE_REFRESH_TOKEN = "wlEnableRefreshToken";
    private static final java.lang.String WL_ENVIRONMENT = "wlEnvironment";
    public static final java.lang.String WL_GCM_SENDER = "GcmSenderId";
    private static final java.lang.String WL_IS_ENCRYPTED = "WLIsEncrypted";
    private static final java.lang.String WL_IS_EXTERNAL_WEBRESOURCES = "WLIsExternalWebResources";
    public static final java.lang.String WL_PLATFORM_VERSION = "wlPlatformVersion";
    private static final java.lang.String WL_PREFS = "WLPrefs";
    private static final java.lang.String WL_RESOURCES_CHECKSUM_PREF_KEY = "wlResourcesChecksum";
    public static final java.lang.String WL_SERVER_CONTEXT = "wlServerContext";
    public static final java.lang.String WL_SERVER_HOST = "wlServerHost";
    public static final java.lang.String WL_SERVER_PORT = "wlServerPort";
    public static final java.lang.String WL_SERVER_PROTOCOL = "wlServerProtocol";
    public static final java.lang.String WL_SERVER_URI = "serverUri";
    private static final java.lang.String WL_SERVER_URL = "WLServerURL";
    public static final java.lang.String WL_SHARE_COOKIES = "wlShareCookies";
    public static final java.lang.String WL_SHARE_USER_CERT = "wlShareUserCert";
    private static final java.lang.String WL_SHOW_ALL_NOTIFICATIONS_IN_TRAY = "showAllNotificationsInTray";
    private static final java.lang.String WL_TEST_WEB_RESOURCES_CHECKSUM = "testWebResourcesChecksum";
    public static final java.lang.String WL_WEB_RESOURCES_UNPACKD_SIZE = "webResourcesSize";
    public static final java.lang.String WL_X_PLATFORM_VERSION = "x-wl-platform-version";
    public static final java.lang.String WL_X_VERSION_HEADER = "x-wl-app-version";
    private static com.worklight.common.WLConfig singleton;
    private java.lang.String absolutePathToExternalAppFiles;
    private android.content.Context con;
    private com.worklight.utils.AESStringEncryption encrypter;
    private boolean isApplicationForeground;
    private boolean isInitComplete;
    private java.lang.String mainFile;
    private java.lang.String oldAbsolutePathToExternalAppFiles;
    private android.content.SharedPreferences prefs;
    private long serverRelativeTime;
    private java.lang.String uuid;
    private java.util.Properties wlProperties;

    static {
            return
    }

    private WLConfig(android.content.Context r11) {
            r10 = this;
            java.lang.String r0 = "/mfp/"
            java.lang.String r1 = "serverUri"
            r10.<init>()
            java.util.Properties r2 = new java.util.Properties
            r2.<init>()
            r10.wlProperties = r2
            r2 = 0
            r10.prefs = r2
            r2 = 0
            r10.isInitComplete = r2
            r10.isApplicationForeground = r2
            boolean r3 = r10.isBOMPresent(r11)
            if (r3 != 0) goto L152
            java.util.Properties r3 = r10.wlProperties     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            android.content.res.AssetManager r4 = r11.getAssets()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r5 = "mfpclient.properties"
            java.io.InputStream r4 = r4.open(r5)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r3.load(r4)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            android.content.pm.PackageManager r3 = r11.getPackageManager()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r4 = r11.getPackageName()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            android.content.pm.PackageInfo r3 = r3.getPackageInfo(r4, r2)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.util.Properties r4 = r10.wlProperties     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r5 = "wlAppId"
            java.lang.String r6 = r3.packageName     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r4.setProperty(r5, r6)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.util.Properties r4 = r10.wlProperties     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r5.<init>()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r3 = r3.versionName     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r5.append(r3)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r3 = "wlAppVersion"
            java.lang.String r5 = r5.toString()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r4.setProperty(r3, r5)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.util.Properties r3 = r10.wlProperties     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r4 = "wlPlatformVersion"
            java.lang.String r5 = "8.0.0.00.2015-12-11T23:31:24Z"
            r3.setProperty(r4, r5)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r3 = "WLPrefs"
            android.content.SharedPreferences r3 = r11.getSharedPreferences(r3, r2)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r10.prefs = r3     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r10.con = r11     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r3 = ""
            r10.mainFile = r3     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.io.File r3 = r11.getFilesDir()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r3 = r3.getAbsolutePath()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r10.oldAbsolutePathToExternalAppFiles = r3     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.io.File r3 = com.worklight.nativeandroid.common.WLUtils.m8243e(r11)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r3 = r3.getAbsolutePath()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r10.absolutePathToExternalAppFiles = r3     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            android.content.ContentResolver r11 = r11.getContentResolver()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r3 = "android_id"
            java.lang.String r11 = android.provider.Settings.Secure.getString(r11, r3)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r10.uuid = r11     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            com.worklight.utils.AESStringEncryption r3 = new com.worklight.utils.AESStringEncryption     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r3.<init>(r11)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r10.encrypter = r3     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.util.Properties r11 = r10.wlProperties     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r11 = r11.getProperty(r1)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            if (r11 == 0) goto L127
            boolean r3 = r11.isEmpty()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            if (r3 != 0) goto L127
            java.net.URL r3 = new java.net.URL     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r3.<init>(r11)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r11 = r3.getProtocol()     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r4 = r3.getHost()     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            int r5 = r3.getPort()     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r6 = -1
            if (r5 != r6) goto Lc2
            java.lang.String r5 = "https"
            boolean r5 = r11.equals(r5)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            if (r5 == 0) goto Lc0
            r5 = 443(0x1bb, float:6.21E-43)
            goto Lc2
        Lc0:
            r5 = 80
        Lc2:
            java.lang.String r3 = r3.getPath()     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            if (r3 == 0) goto L117
            boolean r6 = r3.isEmpty()     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            if (r6 != 0) goto L117
            int r6 = r3.length()     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r7 = 1
            java.lang.String r3 = r3.substring(r7, r6)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.util.Properties r6 = r10.wlProperties     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r8 = "wlServerProtocol"
            r6.setProperty(r8, r11)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.util.Properties r6 = r10.wlProperties     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r8 = "wlServerHost"
            r6.setProperty(r8, r4)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.util.Properties r6 = r10.wlProperties     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r8 = "wlServerPort"
            java.lang.String r9 = java.lang.String.valueOf(r5)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r6.setProperty(r8, r9)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.util.Properties r6 = r10.wlProperties     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r8 = "wlServerContext"
            r6.setProperty(r8, r0)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r6 = "%s://%s:%d/%s%s"
            r8 = 5
            java.lang.Object[] r8 = new java.lang.Object[r8]     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r8[r2] = r11     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r8[r7] = r4     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r11 = 2
            java.lang.Integer r2 = java.lang.Integer.valueOf(r5)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r8[r11] = r2     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r11 = 3
            r8[r11] = r3     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r11 = 4
            r8[r11] = r0     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r11 = java.lang.String.format(r6, r8)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.util.Properties r0 = r10.wlProperties     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            r0.setProperty(r1, r11)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            goto L127
        L117:
            java.lang.RuntimeException r11 = new java.lang.RuntimeException     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r0 = "The serverUri property does not contain an instanceID. Provide a valid instanceID"
            r11.<init>(r0)     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            throw r11     // Catch: java.net.MalformedURLException -> L11f android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
        L11f:
            java.lang.RuntimeException r11 = new java.lang.RuntimeException     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r0 = "The URI provided in the serverUri property is not valid. Provide a valid URI"
            r11.<init>(r0)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            throw r11     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
        L127:
            if (r11 != 0) goto L142
            java.lang.String r11 = r10.getDefaultHost()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            if (r11 == 0) goto L13a
            java.lang.String r11 = r10.getDefaultHost()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            boolean r11 = r11.isEmpty()     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            if (r11 != 0) goto L13a
            return
        L13a:
            java.lang.RuntimeException r11 = new java.lang.RuntimeException     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            java.lang.String r0 = "You must specify the server host (wlServerHost or serverUri) in the client configuration file (mfpclient.properties)."
            r11.<init>(r0)     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
            throw r11     // Catch: android.content.pm.PackageManager.NameNotFoundException -> L143 java.io.IOException -> L14a
        L142:
            return
        L143:
            r11 = move-exception
            java.lang.Error r0 = new java.lang.Error
            r0.<init>(r11)
            throw r0
        L14a:
            java.lang.RuntimeException r11 = new java.lang.RuntimeException
            java.lang.String r0 = "Client configuration file mfpclient.properties not found in application assets. Use the MFP CLI command 'mfpdev app register' to create the file."
            r11.<init>(r0)
            throw r11
        L152:
            java.lang.RuntimeException r11 = new java.lang.RuntimeException
            java.lang.String r0 = "Client configuration file mfpclient.properties contains a BOM (Byte Order Mark). Save the file without a BOM"
            r11.<init>(r0)
            throw r11
    }

    public static void createInstance(android.content.Context r2) {
            java.lang.Class<com.worklight.common.WLConfig> r0 = com.worklight.common.WLConfig.class
            monitor-enter(r0)
            com.worklight.common.WLConfig r1 = com.worklight.common.WLConfig.singleton     // Catch: java.lang.Throwable -> L14
            if (r1 != 0) goto L12
            com.worklight.common.WLConfig r1 = new com.worklight.common.WLConfig     // Catch: java.lang.Throwable -> L14
            android.content.Context r2 = r2.getApplicationContext()     // Catch: java.lang.Throwable -> L14
            r1.<init>(r2)     // Catch: java.lang.Throwable -> L14
            com.worklight.common.WLConfig.singleton = r1     // Catch: java.lang.Throwable -> L14
        L12:
            monitor-exit(r0)
            return
        L14:
            r2 = move-exception
            monitor-exit(r0)
            throw r2
    }

    private java.lang.String getDefaultHost() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "wlServerHost"
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
    }

    private java.lang.String getDefaultPort() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "wlServerPort"
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
    }

    private java.lang.String getDefaultProtocol() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "wlServerProtocol"
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
    }

    private java.lang.String getDefaultRootUrl() {
            r7 = this;
            java.util.Properties r0 = r7.wlProperties
            java.lang.String r1 = "serverUri"
            java.lang.String r0 = r0.getProperty(r1)
            if (r0 == 0) goto L22
            boolean r1 = r0.isEmpty()
            if (r1 != 0) goto L22
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r0)
            java.lang.String r0 = "api"
            r1.append(r0)
            java.lang.String r0 = r1.toString()
            return r0
        L22:
            java.lang.String r0 = r7.getDefaultProtocol()
            java.lang.String r1 = "https"
            boolean r0 = r1.equalsIgnoreCase(r0)
            r1 = 1
            r2 = 0
            if (r0 == 0) goto L3e
            java.lang.String r0 = r7.getDefaultPort()
            java.lang.String r3 = "443"
            boolean r0 = r3.equals(r0)
            if (r0 == 0) goto L3e
            r0 = 1
            goto L3f
        L3e:
            r0 = 0
        L3f:
            java.lang.String r3 = r7.getDefaultPort()
            boolean r3 = com.worklight.nativeandroid.common.WLUtils.SuppressLint(r3)
            java.lang.String r4 = ""
            if (r3 != 0) goto L63
            if (r0 != 0) goto L63
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r3 = ":"
            r0.append(r3)
            java.lang.String r3 = r7.getDefaultPort()
            r0.append(r3)
            java.lang.String r0 = r0.toString()
            goto L64
        L63:
            r0 = r4
        L64:
            java.lang.String r3 = r7.getDefaultProtocol()
            boolean r3 = com.worklight.nativeandroid.common.WLUtils.SuppressLint(r3)
            java.lang.String r5 = "/"
            if (r3 != 0) goto L7f
            java.lang.String r3 = r7.getDefaultServerContext()
            boolean r3 = r3.equals(r5)
            if (r3 == 0) goto L7b
            goto L7f
        L7b:
            java.lang.String r4 = r7.getDefaultServerContext()
        L7f:
            r3 = 4
            java.lang.Object[] r3 = new java.lang.Object[r3]
            java.lang.String r6 = r7.getDefaultProtocol()
            r3[r2] = r6
            java.lang.String r6 = r7.getDefaultHost()
            r3[r1] = r6
            r6 = 2
            r3[r6] = r0
            r0 = 3
            r3[r0] = r4
            java.lang.String r0 = "%s://%s%s%sapi/"
            java.lang.String r0 = java.lang.String.format(r0, r3)
            boolean r3 = r0.endsWith(r5)
            if (r3 == 0) goto La9
            int r3 = r0.length()
            int r3 = r3 - r1
            java.lang.String r0 = r0.substring(r2, r3)
        La9:
            return r0
    }

    private java.lang.String getDefaultServerContext() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "wlServerContext"
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
    }

    public static com.worklight.common.WLConfig getInstance() {
            com.worklight.common.WLConfig r0 = com.worklight.common.WLConfig.singleton
            if (r0 == 0) goto L5
            return r0
        L5:
            java.lang.IllegalStateException r0 = new java.lang.IllegalStateException
            java.lang.String r1 = "getInstance can't be called before createInstance"
            r0.<init>(r1)
            throw r0
    }

    private java.lang.String getPropertyOrPref(java.lang.String r3, java.lang.String r4) {
            r2 = this;
            android.content.SharedPreferences r0 = r2.prefs
            r1 = 0
            java.lang.String r4 = r0.getString(r4, r1)
            if (r4 != 0) goto L12
            java.util.Properties r4 = r2.wlProperties
            java.lang.Object r3 = r4.get(r3)
            r4 = r3
            java.lang.String r4 = (java.lang.String) r4
        L12:
            return r4
    }

    private int getSDKProtocolVersion() {
            r1 = this;
            r0 = 1
            return r0
    }

    private boolean isBOMPresent(android.content.Context r4) {
            r3 = this;
            android.content.res.AssetManager r4 = r4.getAssets()     // Catch: java.lang.Exception -> L29
            java.lang.String r0 = "mfpclient.properties"
            java.io.InputStream r4 = r4.open(r0)     // Catch: java.lang.Exception -> L29
            java.io.BufferedReader r0 = new java.io.BufferedReader     // Catch: java.lang.Exception -> L29
            java.io.InputStreamReader r1 = new java.io.InputStreamReader     // Catch: java.lang.Exception -> L29
            java.lang.String r2 = "UTF8"
            r1.<init>(r4, r2)     // Catch: java.lang.Exception -> L29
            r0.<init>(r1)     // Catch: java.lang.Exception -> L29
            r4 = 4
            r0.mark(r4)     // Catch: java.lang.Exception -> L29
            r4 = 65279(0xfeff, float:9.1475E-41)
            int r1 = r0.read()     // Catch: java.lang.Exception -> L29
            if (r4 != r1) goto L25
            r4 = 1
            return r4
        L25:
            r0.reset()     // Catch: java.lang.Exception -> L29
            goto L2d
        L29:
            r4 = move-exception
            r4.printStackTrace()
        L2d:
            r4 = 0
            return r4
    }

    public void clearSecurityTokenPref() {
            r3 = this;
            android.content.Context r0 = r3.con
            java.lang.String r1 = "SecurityTokenPrefs"
            r2 = 0
            android.content.SharedPreferences r0 = r0.getSharedPreferences(r1, r2)
            android.content.SharedPreferences$Editor r0 = r0.edit()
            r0.clear()
            r0.commit()
            return
    }

    public void clearWLPref() {
            r1 = this;
            android.content.SharedPreferences r0 = r1.prefs
            android.content.SharedPreferences$Editor r0 = r0.edit()
            r0.clear()
            r0.commit()
            return
    }

    public java.lang.String getAppId() {
            r2 = this;
            java.lang.String r0 = "wlAppId"
            java.lang.String r1 = "appIdPref"
            java.lang.String r0 = r2.getPropertyOrPref(r0, r1)
            return r0
    }

    public java.net.URL getAppURL() {
            r3 = this;
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch: java.net.MalformedURLException -> L27
            r0.<init>()     // Catch: java.net.MalformedURLException -> L27
            java.lang.String r1 = r3.getRootURL()     // Catch: java.net.MalformedURLException -> L27
            r0.append(r1)     // Catch: java.net.MalformedURLException -> L27
            java.lang.String r1 = "/apps/services/api/"
            r0.append(r1)     // Catch: java.net.MalformedURLException -> L27
            java.lang.String r1 = r3.getAppId()     // Catch: java.net.MalformedURLException -> L27
            r0.append(r1)     // Catch: java.net.MalformedURLException -> L27
            java.lang.String r1 = "/android/"
            r0.append(r1)     // Catch: java.net.MalformedURLException -> L27
            java.net.URL r1 = new java.net.URL     // Catch: java.net.MalformedURLException -> L27
            java.lang.String r0 = r0.toString()     // Catch: java.net.MalformedURLException -> L27
            r1.<init>(r0)     // Catch: java.net.MalformedURLException -> L27
            return r1
        L27:
            r0 = move-exception
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Could not parse URL; check assets/mfpclient.properties. "
            r1.append(r2)
            java.lang.String r2 = r0.getMessage()
            r1.append(r2)
            java.lang.RuntimeException r2 = new java.lang.RuntimeException
            java.lang.String r1 = r1.toString()
            r2.<init>(r1, r0)
            throw r2
    }

    public java.lang.String getAppWebUrl() {
            r3 = this;
            java.lang.String r0 = r3.getMainFileFromDescriptor()
            java.lang.String r1 = "http:"
            boolean r1 = r0.startsWith(r1)
            if (r1 != 0) goto L2d
            java.lang.String r1 = "https:"
            boolean r1 = r0.startsWith(r1)
            if (r1 == 0) goto L15
            goto L2d
        L15:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = r3.getWebUrl()
            r1.append(r2)
            java.lang.String r2 = "/"
            r1.append(r2)
            r1.append(r0)
            java.lang.String r0 = r1.toString()
        L2d:
            return r0
    }

    public java.lang.String getApplicationAbsolutePathToExternalAppFiles() {
            r1 = this;
            java.lang.String r0 = r1.absolutePathToExternalAppFiles
            return r0
    }

    public java.lang.String getApplicationAbsolutePathToExternalWWWFiles() {
            r2 = this;
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = r2.absolutePathToExternalAppFiles
            r0.append(r1)
            java.lang.String r1 = "/www"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            return r0
    }

    public org.json.JSONObject getApplicationData() {
            r3 = this;
            org.json.JSONObject r0 = new org.json.JSONObject
            r0.<init>()
            com.worklight.common.WLConfig r1 = com.worklight.common.WLConfig.singleton
            java.lang.String r1 = r1.getPackageName()
            java.lang.String r2 = "id"
            r0.put(r2, r1)
            java.lang.String r1 = "clientPlatform"
            java.lang.String r2 = "android"
            r0.put(r1, r2)
            com.worklight.common.WLConfig r1 = com.worklight.common.WLConfig.singleton
            java.lang.String r1 = r1.getApplicationVersion()
            java.lang.String r2 = "version"
            r0.put(r2, r1)
            return r0
    }

    public long getApplicationInstallTime() {
            r2 = this;
            java.lang.String r0 = "appInstallTime"
            long r0 = r2.readLongWLPref(r0)
            return r0
    }

    public java.lang.String getApplicationOldAbsolutePathToExternalWWWFiles() {
            r2 = this;
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = r2.oldAbsolutePathToExternalAppFiles
            r0.append(r1)
            java.lang.String r1 = "/www"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            return r0
    }

    public java.lang.String getApplicationVersion() {
            r2 = this;
            java.lang.String r0 = "wlAppVersion"
            java.lang.String r1 = "appIdPref"
            java.lang.String r0 = r2.getPropertyOrPref(r0, r1)
            return r0
    }

    public org.json.JSONObject getClientData() {
            r3 = this;
            com.worklight.common.security.WLDeviceAuthManager r0 = com.worklight.common.security.WLDeviceAuthManager.getInstance()
            org.json.JSONObject r0 = r0.getDeviceData()
            com.worklight.common.WLConfig r1 = com.worklight.common.WLConfig.singleton
            java.lang.String r1 = r1.getPackageName()
            java.lang.String r2 = "id"
            r0.put(r2, r1)
            java.lang.String r1 = "clientPlatform"
            java.lang.String r2 = "android"
            r0.put(r1, r2)
            com.worklight.common.WLConfig r1 = com.worklight.common.WLConfig.singleton
            java.lang.String r1 = r1.getApplicationVersion()
            java.lang.String r2 = "version"
            r0.put(r2, r1)
            int r1 = r3.getSDKProtocolVersion()
            java.lang.String r2 = "sdk_protocol_version"
            r0.put(r2, r1)
            return r0
    }

    public long getCurrentWithRelativeTime() {
            r4 = this;
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r4.serverRelativeTime
            long r0 = r0 + r2
            return r0
    }

    public java.lang.String getDirectUpdatePublicKey() {
            r3 = this;
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r1 = "wlSecureDirectUpdatePublicKey"
            java.lang.String r2 = ""
            java.lang.String r0 = r0.getProperty(r1, r2)
            return r0
    }

    public java.lang.String getHost() {
            r3 = this;
            java.lang.String r0 = r3.getRootURL()
            java.lang.String r1 = "wlServerHost"
            if (r0 == 0) goto L1d
            java.net.URL r2 = new java.net.URL     // Catch: java.net.MalformedURLException -> L12
            r2.<init>(r0)     // Catch: java.net.MalformedURLException -> L12
            java.lang.String r0 = r2.getHost()     // Catch: java.net.MalformedURLException -> L12
            return r0
        L12:
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
        L1d:
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
    }

    public long getInProgressChecksumPref() {
            r2 = this;
            java.lang.String r0 = "inProgressChecksum"
            long r0 = r2.readLongWLPref(r0)
            return r0
    }

    public java.lang.String getLanguagePreferences() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "languagePreferences"
            java.lang.String r0 = r0.getProperty(r1)
            return r0
    }

    public java.lang.String getLocalStorageRoot() {
            r1 = this;
            boolean r0 = r1.isExternalWebResources()
            if (r0 == 0) goto Lb
            java.lang.String r0 = r1.getApplicationAbsolutePathToExternalAppFiles()
            goto Ld
        Lb:
            java.lang.String r0 = "/android_asset"
        Ld:
            return r0
    }

    public java.lang.String getMainFileFromDescriptor() {
            r5 = this;
            java.lang.String r0 = r5.mainFile
            java.lang.String r1 = ""
            boolean r0 = r0.equals(r1)
            if (r0 == 0) goto L63
            android.content.Context r0 = r5.con
            android.content.res.Resources r0 = r0.getResources()
            android.content.Context r2 = r5.con
            java.lang.String r2 = r2.getPackageName()
            java.lang.String r3 = "config"
            java.lang.String r4 = "xml"
            int r0 = r0.getIdentifier(r3, r4, r2)
            android.content.Context r2 = r5.con     // Catch: java.lang.Exception -> L5c
            android.content.res.Resources r2 = r2.getResources()     // Catch: java.lang.Exception -> L5c
            android.content.res.XmlResourceParser r0 = r2.getXml(r0)     // Catch: java.lang.Exception -> L5c
            r0.next()     // Catch: java.lang.Exception -> L5c
            int r2 = r0.getEventType()     // Catch: java.lang.Exception -> L5c
        L2f:
            r3 = 1
            if (r2 == r3) goto L4f
            r3 = 2
            if (r2 != r3) goto L4a
            java.lang.String r2 = r0.getName()     // Catch: java.lang.Exception -> L5c
            java.lang.String r3 = "content"
            boolean r2 = r2.equals(r3)     // Catch: java.lang.Exception -> L5c
            if (r2 == 0) goto L4a
            r2 = 0
            java.lang.String r3 = "src"
            java.lang.String r2 = r0.getAttributeValue(r2, r3)     // Catch: java.lang.Exception -> L5c
            r5.mainFile = r2     // Catch: java.lang.Exception -> L5c
        L4a:
            int r2 = r0.next()     // Catch: java.lang.Exception -> L5c
            goto L2f
        L4f:
            java.lang.String r0 = r5.mainFile     // Catch: java.lang.Exception -> L5c
            boolean r0 = r0.equals(r1)     // Catch: java.lang.Exception -> L5c
            if (r0 == 0) goto L63
            java.lang.String r0 = "index.html"
            r5.mainFile = r0     // Catch: java.lang.Exception -> L5c
            goto L63
        L5c:
            r0 = move-exception
            r0.getMessage()
            r0.printStackTrace()
        L63:
            java.lang.String r0 = r5.mainFile
            return r0
    }

    public java.lang.String getMainFilePath() {
            r2 = this;
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = r2.getAppId()
            r0.append(r1)
            java.lang.String r1 = ".html"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            return r0
    }

    public java.lang.String[] getMediaExtensions() {
            r3 = this;
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r1 = "ignoredFileExtensions"
            java.lang.String r0 = r0.getProperty(r1)
            if (r0 == 0) goto L19
            java.lang.String r1 = " "
            java.lang.String r2 = ""
            java.lang.String r0 = r0.replaceAll(r1, r2)
            java.lang.String r1 = ","
            java.lang.String[] r0 = r0.split(r1)
            return r0
        L19:
            r0 = 0
            return r0
    }

    public java.lang.String getPackageName() {
            r1 = this;
            android.content.Context r0 = r1.con
            java.lang.String r0 = r0.getPackageName()
            return r0
    }

    public java.lang.String getPlatformVersion() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "wlPlatformVersion"
            java.lang.String r0 = r0.getProperty(r1)
            return r0
    }

    public java.lang.String getPort() {
            r3 = this;
            java.lang.String r0 = r3.getRootURL()
            java.lang.String r1 = "wlServerPort"
            if (r0 == 0) goto L29
            java.net.URL r2 = new java.net.URL     // Catch: java.net.MalformedURLException -> L1e
            r2.<init>(r0)     // Catch: java.net.MalformedURLException -> L1e
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch: java.net.MalformedURLException -> L1e
            r0.<init>()     // Catch: java.net.MalformedURLException -> L1e
            int r2 = r2.getPort()     // Catch: java.net.MalformedURLException -> L1e
            r0.append(r2)     // Catch: java.net.MalformedURLException -> L1e
            java.lang.String r0 = r0.toString()     // Catch: java.net.MalformedURLException -> L1e
            return r0
        L1e:
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
        L29:
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
    }

    public java.lang.String getProtocol() {
            r3 = this;
            java.lang.String r0 = r3.getRootURL()
            java.lang.String r1 = "wlServerProtocol"
            if (r0 == 0) goto L1d
            java.net.URL r2 = new java.net.URL     // Catch: java.net.MalformedURLException -> L12
            r2.<init>(r0)     // Catch: java.net.MalformedURLException -> L12
            java.lang.String r0 = r2.getProtocol()     // Catch: java.net.MalformedURLException -> L12
            return r0
        L12:
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
        L1d:
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.String r0 = r0.trim()
            return r0
    }

    public org.json.JSONObject getRegistrationAttributesData() {
            r3 = this;
            org.json.JSONObject r0 = new org.json.JSONObject
            r0.<init>()
            int r1 = r3.getSDKProtocolVersion()
            java.lang.String r2 = "sdk_protocol_version"
            r0.put(r2, r1)
            return r0
    }

    public java.lang.String getResourceChecksumPref() {
            r1 = this;
            java.lang.String r0 = "wlResourcesChecksum"
            java.lang.String r0 = r1.readWLPref(r0)
            return r0
    }

    public java.lang.String getRootURL() {
            r3 = this;
            boolean r0 = r3.shouldUseCustomServerUrl()
            if (r0 != 0) goto Lb
            java.lang.String r0 = r3.getDefaultRootUrl()
            return r0
        Lb:
            android.content.SharedPreferences r0 = r3.prefs
            r1 = 0
            java.lang.String r2 = "WLServerURL"
            java.lang.String r0 = r0.getString(r2, r1)
            if (r0 != 0) goto L1a
            java.lang.String r0 = r3.getDefaultRootUrl()
        L1a:
            return r0
    }

    public java.lang.String getServerContext() {
            r3 = this;
            java.lang.String r0 = r3.getRootURL()
            java.util.Properties r1 = r3.wlProperties
            java.lang.String r2 = "serverUri"
            java.lang.String r1 = r1.getProperty(r2)
            java.lang.String r2 = "wlServerContext"
            if (r1 == 0) goto L2e
            boolean r1 = r1.isEmpty()
            if (r1 != 0) goto L2e
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r0 = r0.getProperty(r2)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r0)
            java.lang.String r0 = "api"
            r1.append(r0)
            java.lang.String r0 = r1.toString()
            return r0
        L2e:
            if (r0 == 0) goto L45
            java.net.URL r1 = new java.net.URL     // Catch: java.net.MalformedURLException -> L3a
            r1.<init>(r0)     // Catch: java.net.MalformedURLException -> L3a
            java.lang.String r0 = r1.getPath()     // Catch: java.net.MalformedURLException -> L3a
            return r0
        L3a:
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r0 = r0.getProperty(r2)
            java.lang.String r0 = r0.trim()
            return r0
        L45:
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r0 = r0.getProperty(r2)
            java.lang.String r0 = r0.trim()
            return r0
    }

    public java.util.List<java.lang.String> getShareCookies() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "wlShareCookies"
            java.lang.String r0 = r0.getProperty(r1)
            if (r0 != 0) goto Lc
            java.lang.String r0 = ""
        Lc:
            java.lang.String r1 = ","
            java.lang.String[] r0 = r0.split(r1)
            java.util.List r0 = java.util.Arrays.asList(r0)
            return r0
    }

    public java.lang.String getTestWebResourcesChecksumFlag() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "testWebResourcesChecksum"
            java.lang.String r0 = r0.getProperty(r1)
            return r0
    }

    public java.lang.String getWebResourcesUnpackedSize() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "webResourcesSize"
            java.lang.String r0 = r0.getProperty(r1)
            return r0
    }

    public java.lang.String getWebResourcesUrl() {
            r2 = this;
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = r2.getLocalStorageRoot()
            r0.append(r1)
            java.lang.String r1 = "/www"
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            return r0
    }

    public java.lang.String getWebUrl() {
            r2 = this;
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "file://"
            r0.append(r1)
            java.lang.String r1 = r2.getWebResourcesUrl()
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            return r0
    }

    public java.lang.String getWlGenerateDeviceIdStrong() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "wlDeviceIdStrength"
            java.lang.String r0 = r0.getProperty(r1)
            return r0
    }

    public boolean isClearCacheNextLoad() {
            r3 = this;
            android.content.SharedPreferences r0 = r3.prefs
            java.lang.String r1 = "com.worklight.clearCacheNextLoad"
            r2 = 0
            boolean r0 = r0.getBoolean(r1, r2)
            return r0
    }

    public boolean isEncrypted() {
            r1 = this;
            java.lang.String r0 = "WLIsEncrypted"
            java.lang.String r0 = r1.readWLPref(r0)
            java.lang.Boolean r0 = java.lang.Boolean.valueOf(r0)
            boolean r0 = r0.booleanValue()
            return r0
    }

    public boolean isExternalWebResources() {
            r1 = this;
            java.lang.String r0 = "WLIsExternalWebResources"
            java.lang.String r0 = r1.readWLPref(r0)
            java.lang.Boolean r0 = java.lang.Boolean.valueOf(r0)
            boolean r0 = r0.booleanValue()
            return r0
    }

    public boolean isHybridActivityInForeground() {
            r1 = this;
            boolean r0 = r1.isApplicationForeground
            return r0
    }

    public boolean isInitComplete() {
            r1 = this;
            boolean r0 = r1.isInitComplete
            return r0
    }

    public boolean isRefreshTokenEnabled() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "wlEnableRefreshToken"
            java.lang.String r0 = r0.getProperty(r1)
            if (r0 == 0) goto L18
            java.lang.String r0 = r0.trim()
            java.lang.String r1 = "true"
            boolean r0 = r0.equalsIgnoreCase(r1)
            if (r0 == 0) goto L18
            r0 = 1
            return r0
        L18:
            r0 = 0
            return r0
    }

    public boolean isShareUserCert() {
            r2 = this;
            java.util.Properties r0 = r2.wlProperties
            java.lang.String r1 = "wlShareUserCert"
            java.lang.String r0 = r0.getProperty(r1)
            java.lang.Boolean r0 = java.lang.Boolean.valueOf(r0)
            boolean r0 = r0.booleanValue()
            return r0
    }

    public boolean isShouldTestWebResourcesChecksum() {
            r2 = this;
            java.lang.String r0 = r2.getTestWebResourcesChecksumFlag()
            java.lang.String r1 = "true"
            boolean r0 = r0.equals(r1)
            return r0
    }

    public boolean isShowAllNotificationsInTray() {
            r3 = this;
            java.util.Properties r0 = r3.wlProperties
            java.lang.String r1 = "showAllNotificationsInTray"
            java.lang.String r2 = "false"
            java.lang.String r0 = r0.getProperty(r1, r2)
            java.lang.Boolean r0 = java.lang.Boolean.valueOf(r0)
            boolean r0 = r0.booleanValue()
            return r0
    }

    public long readLongWLPref(java.lang.String r4) {
            r3 = this;
            android.content.SharedPreferences r0 = r3.prefs
            r1 = 0
            long r0 = r0.getLong(r4, r1)
            return r0
    }

    public java.lang.String readPref(java.lang.String r3, java.lang.String r4) {
            r2 = this;
            android.content.Context r0 = r2.con
            r1 = 0
            android.content.SharedPreferences r3 = r0.getSharedPreferences(r3, r1)
            r0 = 0
            java.lang.String r3 = r3.getString(r4, r0)
            return r3
    }

    public java.lang.String readPrefEncrypted(java.lang.String r2, java.lang.String r3) {
            r1 = this;
            java.lang.String r2 = r1.readPref(r2, r3)
            if (r2 == 0) goto L1b
            com.worklight.utils.AESStringEncryption r3 = r1.encrypter
            byte[] r2 = r2.getBytes()
            r0 = 2
            byte[] r2 = android.util.Base64.decode(r2, r0)
            byte[] r2 = r3.m8236e(r0, r2)
            java.lang.String r3 = new java.lang.String
            r3.<init>(r2)
            r2 = r3
        L1b:
            return r2
    }

    public java.lang.String readSecurityPref(java.lang.String r2) {
            r1 = this;
            java.lang.String r0 = "SecurityPrefs"
            java.lang.String r2 = r1.readPrefEncrypted(r0, r2)
            return r2
    }

    public java.lang.String readSecurityTokenPref(java.lang.String r2) {
            r1 = this;
            java.lang.String r0 = "SecurityTokenPrefs"
            java.lang.String r2 = r1.readPrefEncrypted(r0, r2)
            return r2
    }

    public java.lang.String readWLPref(java.lang.String r2) {
            r1 = this;
            java.lang.String r0 = "WLPrefs"
            java.lang.String r2 = r1.readPref(r0, r2)
            return r2
    }

    public java.lang.String readWLPrefEncrypted(java.lang.String r2) {
            r1 = this;
            java.lang.String r0 = "WLPrefs"
            java.lang.String r2 = r1.readPrefEncrypted(r0, r2)
            return r2
    }

    public void removeSecurityTokenPref(java.lang.String r4) {
            r3 = this;
            android.content.Context r0 = r3.con
            java.lang.String r1 = "SecurityTokenPrefs"
            r2 = 0
            android.content.SharedPreferences r0 = r0.getSharedPreferences(r1, r2)
            android.content.SharedPreferences$Editor r0 = r0.edit()
            r0.remove(r4)
            r0.commit()
            return
    }

    public void setApplicationInstallTime(long r2) {
            r1 = this;
            java.lang.String r0 = "appInstallTime"
            r1.writeLongWLPref(r0, r2)
            return
    }

    public void setClearCacheNextLoadPref(boolean r3) {
            r2 = this;
            android.content.SharedPreferences r0 = r2.prefs
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r1 = "com.worklight.clearCacheNextLoad"
            r0.putBoolean(r1, r3)
            r0.commit()
            return
    }

    public void setDefaultRootUrlPref() {
            r2 = this;
            java.lang.String r0 = r2.getDefaultRootUrl()
            java.lang.String r1 = "WLDefaultServerURL"
            r2.writeWLPref(r1, r0)
            return
    }

    public void setExternalWebResourcesPref(boolean r2) {
            r1 = this;
            java.lang.String r2 = java.lang.Boolean.toString(r2)
            java.lang.String r0 = "WLIsExternalWebResources"
            r1.writeWLPref(r0, r2)
            return
    }

    public void setHybridActivityInForeground(boolean r1) {
            r0 = this;
            r0.isApplicationForeground = r1
            return
    }

    public void setInProgressChecksumPref(long r2) {
            r1 = this;
            java.lang.String r0 = "inProgressChecksum"
            r1.writeLongWLPref(r0, r2)
            return
    }

    public void setInitComplete(boolean r1) {
            r0 = this;
            r0.isInitComplete = r1
            return
    }

    public void setIsEncrypted(boolean r2) {
            r1 = this;
            java.lang.String r2 = java.lang.Boolean.toString(r2)
            java.lang.String r0 = "WLIsEncrypted"
            r1.writeWLPref(r0, r2)
            return
    }

    public void setResourceChecksumPref(java.lang.String r2) {
            r1 = this;
            java.lang.String r0 = "wlResourcesChecksum"
            r1.writeWLPref(r0, r2)
            return
    }

    public void setServerRelativeTime(long r1) {
            r0 = this;
            r0.serverRelativeTime = r1
            return
    }

    public void setServerUrl(java.lang.String r2) {
            r1 = this;
            r0 = 1
            r1.useCustomServerUrl(r0)
            java.lang.String r0 = "WLServerURL"
            r1.writeWLPref(r0, r2)
            return
    }

    public boolean shouldUseCustomServerUrl() {
            r3 = this;
            android.content.SharedPreferences r0 = r3.prefs
            java.lang.String r1 = "useCustomServerUrl"
            r2 = 0
            java.lang.String r0 = r0.getString(r1, r2)
            java.lang.Boolean r0 = java.lang.Boolean.valueOf(r0)
            boolean r0 = r0.booleanValue()
            return r0
    }

    public void useCustomServerUrl(boolean r2) {
            r1 = this;
            java.lang.String r2 = java.lang.Boolean.toString(r2)
            java.lang.String r0 = "useCustomServerUrl"
            r1.writeWLPref(r0, r2)
            return
    }

    public void writeLongWLPref(java.lang.String r2, long r3) {
            r1 = this;
            android.content.SharedPreferences r0 = r1.prefs
            android.content.SharedPreferences$Editor r0 = r0.edit()
            r0.putLong(r2, r3)
            r0.commit()
            return
    }

    public void writePref(java.lang.String r3, java.lang.String r4, java.lang.String r5) {
            r2 = this;
            android.content.Context r0 = r2.con
            r1 = 0
            android.content.SharedPreferences r3 = r0.getSharedPreferences(r3, r1)
            android.content.SharedPreferences$Editor r3 = r3.edit()
            r3.putString(r4, r5)
            r3.commit()
            return
    }

    public void writePrefEncrypted(java.lang.String r3, java.lang.String r4, java.lang.String r5) {
            r2 = this;
            if (r5 == 0) goto L12
            com.worklight.utils.AESStringEncryption r0 = r2.encrypter
            r1 = 1
            byte[] r5 = r5.getBytes()
            byte[] r5 = r0.m8236e(r1, r5)
            r0 = 2
            java.lang.String r5 = android.util.Base64.encodeToString(r5, r0)
        L12:
            r2.writePref(r3, r4, r5)
            return
    }

    public void writeSecurityPref(java.lang.String r2, java.lang.String r3) {
            r1 = this;
            java.lang.String r0 = "SecurityPrefs"
            r1.writePrefEncrypted(r0, r2, r3)
            return
    }

    public void writeSecurityTokenPref(java.lang.String r2, java.lang.String r3) {
            r1 = this;
            java.lang.String r0 = "SecurityTokenPrefs"
            r1.writePrefEncrypted(r0, r2, r3)
            return
    }

    public void writeWLPref(java.lang.String r2, java.lang.String r3) {
            r1 = this;
            java.lang.String r0 = "WLPrefs"
            r1.writePref(r0, r2, r3)
            return
    }

    public void writeWLPrefEncrypted(java.lang.String r2, java.lang.String r3) {
            r1 = this;
            java.lang.String r0 = "WLPrefs"
            r1.writePrefEncrypted(r0, r2, r3)
            return
    }
}

package com.worklight.utils;

/* loaded from: classes4.dex */
public final class WLBase64 {

    /* renamed from: a */
    private static final byte[] f24096a = null;

    public static java.lang.String $r8$backportedMethods$utility$Double$1$hashCode(byte[] r11, java.lang.String r12) {
            int r0 = r11.length
            int r0 = r0 * 4
            int r0 = r0 / 3
            int r1 = r0 / 76
            int r1 = r1 + 3
            int r0 = r0 + r1
            byte[] r0 = new byte[r0]
            int r1 = r11.length
            int r2 = r11.length
            int r2 = r2 % 3
            int r1 = r1 - r2
            r2 = 0
            r3 = 0
            r4 = 0
        L14:
            r5 = 2
            if (r3 >= r1) goto L5b
            int r6 = r4 + 1
            byte[] r7 = com.worklight.utils.WLBase64.f24096a
            r8 = r11[r3]
            r8 = r8 & 255(0xff, float:3.57E-43)
            int r8 = r8 >> r5
            r8 = r7[r8]
            r0[r4] = r8
            int r4 = r6 + 1
            r8 = r11[r3]
            int r9 = r3 + 1
            r8 = r8 & 3
            int r8 = r8 << 4
            r10 = r11[r9]
            r10 = r10 & 255(0xff, float:3.57E-43)
            int r10 = r10 >> 4
            r8 = r8 | r10
            r8 = r7[r8]
            r0[r6] = r8
            int r6 = r4 + 1
            r8 = r11[r9]
            int r9 = r3 + 2
            r8 = r8 & 15
            int r5 = r8 << 2
            r8 = r11[r9]
            r8 = r8 & 255(0xff, float:3.57E-43)
            int r8 = r8 >> 6
            r5 = r5 | r8
            r5 = r7[r5]
            r0[r4] = r5
            int r4 = r6 + 1
            r5 = r11[r9]
            r5 = r5 & 63
            r5 = r7[r5]
            r0[r6] = r5
            int r3 = r3 + 3
            goto L14
        L5b:
            int r3 = r11.length
            int r3 = r3 % 3
            r6 = 61
            r7 = 1
            if (r3 == r7) goto L96
            if (r3 != r5) goto Lb8
            int r3 = r4 + 1
            byte[] r8 = com.worklight.utils.WLBase64.f24096a
            r9 = r11[r1]
            r9 = r9 & 255(0xff, float:3.57E-43)
            int r9 = r9 >> r5
            r9 = r8[r9]
            r0[r4] = r9
            int r4 = r3 + 1
            r9 = r11[r1]
            int r1 = r1 + r7
            r7 = r11[r1]
            r7 = r7 & 255(0xff, float:3.57E-43)
            int r7 = r7 >> 4
            r9 = r9 & 3
            int r9 = r9 << 4
            r7 = r7 | r9
            r7 = r8[r7]
            r0[r3] = r7
            int r3 = r4 + 1
            r11 = r11[r1]
            r11 = r11 & 15
            int r11 = r11 << r5
            r11 = r8[r11]
            r0[r4] = r11
            int r4 = r3 + 1
            r0[r3] = r6
            goto Lb8
        L96:
            int r3 = r4 + 1
            byte[] r7 = com.worklight.utils.WLBase64.f24096a
            r8 = r11[r1]
            r8 = r8 & 255(0xff, float:3.57E-43)
            int r5 = r8 >> 2
            r5 = r7[r5]
            r0[r4] = r5
            int r4 = r3 + 1
            r11 = r11[r1]
            r11 = r11 & 3
            int r11 = r11 << 4
            r11 = r7[r11]
            r0[r3] = r11
            int r11 = r4 + 1
            r0[r4] = r6
            int r4 = r11 + 1
            r0[r11] = r6
        Lb8:
            java.lang.String r11 = new java.lang.String
            r11.<init>(r0, r2, r4, r12)
            r12 = 43
            r0 = 45
            java.lang.String r11 = r11.replace(r12, r0)
            r12 = 47
            r0 = 95
            java.lang.String r11 = r11.replace(r12, r0)
            return r11
    }

    static {
            r0 = 64
            byte[] r0 = new byte[r0]
            r0 = {x000a: FILL_ARRAY_DATA  , data: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47} // fill-array
            com.worklight.utils.WLBase64.f24096a = r0
            return
    }

    public WLBase64() {
            r0 = this;
            r0.<init>()
            return
    }
}
